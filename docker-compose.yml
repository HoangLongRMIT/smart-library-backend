version: "3.9"
services:
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: library
      MYSQL_USER: app
      MYSQL_PASSWORD: app
    ports: ["3310:3306"]
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uapp", "-papp"]
      interval: 5s
      timeout: 3s
      retries: 20

  # One-shot job: runs scripts/load-sql.sh against the mysql service
  db-load:
    image: mysql:8.0
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: root
      MYSQL_DATABASE: library
      DB_DIR: /db
    volumes:
      - ./db:/db:ro
      - ./scripts/load-sql.sh:/load-sql.sh:ro
    command: ["/bin/sh", "-lc", "/load-sql.sh"]
    # If your compose supports it, keep this:
    restart: "no"

  mongo:
    image: mongo:7
    ports: ["27017:27017"]
    volumes:
      - mongo_data:/data/db

  api:
    build: .
    depends_on:
      mysql:
        condition: service_healthy
      db-load:
        # If your docker compose supports this, use completed_successfully.
        # Otherwise keep service_started and the proc will already exist by the time API starts in practice.
        condition: service_started
    env_file: [.env]
    ports: ["8080:8080"]
    volumes:
      - .:/usr/src/app
    command: ["npm", "run", "dev"]

volumes:
  mysql_data:
  mongo_data:
